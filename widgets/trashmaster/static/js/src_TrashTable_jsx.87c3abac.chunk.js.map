{"version":3,"file":"static/js/src_TrashTable_jsx.87c3abac.chunk.js","mappings":"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","sources":["TrashTable.jsx"],"sourcesContent":["import React from 'react';\r\nimport i18next from 'i18next';\r\nimport { i18n as I18n } from '@iobroker/adapter-react-v5';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { withStyles,withTheme } from '@mui/styles';\r\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\r\nimport translations from './translations-i18next';\r\nimport Utils,{ arr2string,changeData,getInstances } from './Utils';\r\n\r\nconst styles = () => ({\r\n    root: {\r\n        flex: 1,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n});\r\n\r\nclass TrashTable extends (window.visRxWidget || VisRxWidget) {\r\n    constructor(props) {\r\n        super(props);\r\n        this.arr2string = arr2string.bind(this);\r\n        this.changeData = changeData.bind(this);\r\n        this.getInstances = getInstances.bind(this);\r\n        this.initial = true;\r\n        this.instancenameLocal = this.state.data.instancename;\r\n        this.dayformatLocal = this.state.data.dayformat;\r\n        this.oidChange = false;\r\n        this.wasteCalendar = [];\r\n        this.refTable = React.createRef();\r\n        this.refTableBody = React.createRef();\r\n        this.refTableHeader = React.createRef();\r\n    }\r\n\r\n    static getWidgetInfo() {\r\n        // more details for custom filters in file:\r\n        // vis-2-beta/static/js/Attributes/Widget/WidgetField.jsx (line 424ff)\r\n        //\r\n        // new fields are not added to existing widgets !!!\r\n        return {\r\n            id: 'tplTrashTable',\r\n            visSet: 'trashmaster',\r\n            visName: I18n.t('vis_2_widgets_trashmaster_widgetname_table'), // Name of widget\r\n            visAttrs: [\r\n                {\r\n                    name: 'common', // group name\r\n                    label: 'vis_2_widgets_trashmaster_common', // translated group label\r\n                    fields: [\r\n                        {\r\n                            name: 'instancename',\r\n                            label: 'vis_2_widgets_trashmaster_instance',\r\n                            type: 'custom',\r\n                            hidden: 'data.instancenamehidden === \"true\"',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showInstances(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'instancenamehidden',  // hide instance selection if only one instance exists\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: 'false',\r\n                        },\r\n                        {\r\n                            name: 'selectinstances',     // hidden value of the select entries for instances\r\n                            label: 'selectinstances',\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: '',\r\n                        },\r\n                        {\r\n                            name: 'dayformat',\r\n                            default: 'short',\r\n                            label: 'vis_2_widgets_trashmaster_dayformat',\r\n                            type: 'select',\r\n                            options: [\r\n                                {\r\n                                    value: 'short',\r\n                                    label: 'vis_2_widgets_trashmaster_dateformat_short',\r\n                                },\r\n                                {\r\n                                    value: 'long',\r\n                                    label: 'vis_2_widgets_trashmaster_dateformat_long',\r\n                                },\r\n                            ],\r\n                        },\r\n                        {\r\n                            name: 'fontfamily',\r\n                            label: 'vis_2_widgets_trashmaster_fontfamily',\r\n                            default: 'Arial',\r\n                            type: 'custom',\r\n                            hidden: 'data.showdate === false && data.showdays === false',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showFontfamily(field,data,onDataChange,['fontsizeheader','fontsizebody','fontsizemonth']),\r\n                        },\r\n                        {\r\n                            name: 'showheader',\r\n                            default: true,\r\n                            label: 'vis_2_widgets_trashmaster_showheader',\r\n                            type: 'custom',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showCheckbox(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'fontsizeheader',\r\n                            default: 12,\r\n                            label: 'vis_2_widgets_trashmaster_fontsize_header',\r\n                            type: 'slider',\r\n                            hidden: 'data.showheader === false',\r\n                            min: 6,\r\n                            max: 24,\r\n                            step: 1,\r\n                        },\r\n                        {\r\n                            name: 'fontsizemonth',\r\n                            default: 10,\r\n                            label: 'vis_2_widgets_trashmaster_fontsize_month',\r\n                            type: 'slider',\r\n                            min: 6,\r\n                            max: 24,\r\n                            step: 1,\r\n                        },\r\n                        {\r\n                            name: 'fontsizebody',\r\n                            default: 10,\r\n                            label: 'vis_2_widgets_trashmaster_fontsize_body',\r\n                            type: 'slider',\r\n                            min: 6,\r\n                            max: 24,\r\n                            step: 1,\r\n                        },\r\n                        {\r\n                            name: 'oid',     // name in data structure\r\n                            label: 'vis_2_widgets_trashmaster_oid',\r\n                            type: 'id',\r\n                            noInit: true,\r\n                            hidden: true,\r\n                        },\r\n                    ],\r\n                },\r\n                // check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\r\n            ],\r\n            visPrev: 'widgets/trashmaster/img/table.png',\r\n        };\r\n    }\r\n\r\n    // eslint-disable-next-line class-methods-use-this\r\n    async propertiesUpdate() {\r\n        // Widget has 3 important states\r\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\r\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\r\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\r\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\r\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\r\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\r\n        if (this.initial === true && this.oidChange !== true) {\r\n            return;\r\n        }\r\n        const { dayformat,instancename } = this.state.data;\r\n        if ((typeof instancename !== 'undefined' && this.instancenameLocal !== instancename) || this.oidChange === true || this.dayformatLocal !== dayformat) {\r\n            this.instancenameLocal = instancename;\r\n            this.dayformatLocal = dayformat;\r\n            await this.getWasteCalendar(instancename);\r\n            if (this.oidChange === true) { this.oidChange = false; }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        super.componentDidMount();\r\n        // Update data\r\n        i18next.init(translations)\r\n            .then(() => {\r\n                i18next.changeLanguage(this.props.systemConfig.common.language);\r\n            });\r\n        this.getInstances()\r\n            .then(instance => {\r\n                this.getWasteCalendar(instance)\r\n                    .then(() => {\r\n                        this.changeTableSize()\r\n                            .then(() => {\r\n                                this.initial = false;\r\n                            });\r\n                    });\r\n            });\r\n    }\r\n\r\n    // Do not delete this method. It is used by vis to read the widget configuration.\r\n    // eslint-disable-next-line class-methods-use-this\r\n    getWidgetInfo() {\r\n        return TrashTable.getWidgetInfo();\r\n    }\r\n\r\n    // This function is called every time when rxData is changed\r\n    onRxDataChanged() {\r\n        this.propertiesUpdate();\r\n    }\r\n\r\n    // This function is called every time when rxStyle is changed\r\n    // eslint-disable-next-line class-methods-use-this\r\n    onRxStyleChanged() {\r\n        this.changeTableSize();\r\n    }\r\n\r\n    async changeTableSize() {\r\n        const height = this.refService.current.clientHeight;\r\n        if (height !== 0) {\r\n            const headerHeight = this.state.data.showheader === false ? 0 : parseInt(this.refTableHeader.current.offsetHeight);\r\n            const newTableHeight = `${(height - 2).toString()}px`;\r\n            const newHeight = `${(height - headerHeight - 10).toString()}px`;\r\n            this.refTable.current.style.height = newTableHeight;\r\n            this.refTableBody.current.style.height = newHeight;\r\n        }\r\n        const width = this.refService.current.clientWidth;\r\n        if (width !== 0) {\r\n            const newWidth = `${(width - 2).toString()}px`;\r\n            this.refTable.current.style.width = newWidth;\r\n            this.refTableBody.current.style.width = newWidth;\r\n            this.refTableHeader.current.style.width = newWidth;\r\n        }\r\n    }\r\n\r\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\r\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\r\n    onStateUpdated(id,state) {\r\n        // state of the object 'WasteCalendar' has changed\r\n        this.oidChange = true;\r\n        this.propertiesUpdate();\r\n    }\r\n\r\n    async getCalendarObject(instance) {\r\n        const id = `trashmaster.${instance}.WasteCalendar`;\r\n        const calendar = await this.props.socket.getForeignStates(id)\r\n            .then(status => {\r\n                if (!(id in status) || typeof status[id].val === 'undefined') { return {}; }\r\n                this.changeData({ oid: id });\r\n                return JSON.parse(status[id].val);\r\n            });\r\n        return calendar;\r\n    }\r\n\r\n    async getWasteCalendar(instance) {\r\n        let monatsName = '';\r\n        let tag = '';\r\n        this.wasteCalendar = [];\r\n        const tempWasteCalendar = [];\r\n        const calendarObject = await this.getCalendarObject(instance);\r\n        if (typeof calendarObject === 'undefined' || Object.entries(calendarObject).length === 0) return;\r\n        // eslint-disable-next-line array-callback-return\r\n        Object.entries(calendarObject).map(calendarEntry => {\r\n            if (monatsName !== calendarEntry[1].Monatsname) {\r\n                tempWasteCalendar.push({\r\n                    col1span: 3,\r\n                    col2span: 0,\r\n                    col3span: 0,\r\n                    col1: `${calendarEntry[1].Monatsname} ${calendarEntry[1].Jahr}`,\r\n                    col2: '',\r\n                    col3: '',\r\n                });\r\n                monatsName = calendarEntry[1].Monatsname;\r\n            }\r\n            if (tag !== calendarEntry[1].Abfuhrdatum) {\r\n                tempWasteCalendar.push({\r\n                    col1span: 1,\r\n                    col2span: 1,\r\n                    col3span: 1,\r\n                    col1: `${this.state.data.dayformat === 'short' ? `${calendarEntry[1].AbfuhrTagKurz}.` : calendarEntry[1].AbfuhrTagLang}`,\r\n                    col2: `${calendarEntry[1].Tag}.`,\r\n                    col3: calendarEntry[1].Abfuhrart,\r\n                });\r\n                tag = calendarEntry[1].Abfuhrdatum;\r\n            } else {\r\n                tempWasteCalendar.push({\r\n                    col1span: 2,\r\n                    col2span: 0,\r\n                    col3span: 1,\r\n                    col1: '',\r\n                    col2: '',\r\n                    col3: calendarEntry[1].Abfuhrart,\r\n                });\r\n            }\r\n        });\r\n        this.wasteCalendar = [...tempWasteCalendar];\r\n    }\r\n\r\n    renderWidgetBody(props) {\r\n        super.renderWidgetBody(props);\r\n        return <div ref={this.refTable} style={{ overflow: 'auto' }}>\r\n            {this.state.data.showheader === true && <Table>\r\n                <TableHead ref={this.refTableHeader}>\r\n                    <TableRow>\r\n                        <TableCell sx={{ fontSize: this.state.data.fontsizeheader,fontFamily: this.state.data.fontfamily  }} colSpan={3} align=\"left\">\r\n                            <b>{i18next.t('vis_2_widgets_trashmaster_widgetname_table')}</b>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n            </Table>}\r\n            <div ref={this.refTableBody} style={{ overflow: 'auto',height: '200px',width: '100%' }}>\r\n                <Table size=\"small\">\r\n                    <TableBody>\r\n                        {this.wasteCalendar.map((item,index) => (\r\n                            <TableRow key={index}>\r\n                                {item.col1span > 0 && (\r\n                                    <TableCell sx={{ fontSize: item.col1span === 3 ? this.state.data.fontsizemonth : this.state.data.fontsizebody,fontFamily: this.state.data.fontfamily }} colSpan={item.col1span} align=\"left\">\r\n                                        {item.col1}\r\n                                    </TableCell>\r\n                                )}\r\n                                {item.col2span > 0 && (\r\n                                    <TableCell sx={{ fontSize: this.state.data.fontsizebody,fontFamily: this.state.data.fontfamily }} colSpan={item.col2span} align=\"left\">\r\n                                        {item.col2}\r\n                                    </TableCell>\r\n                                )}\r\n                                {item.col3span > 0 && (\r\n                                    <TableCell sx={{ fontSize: this.state.data.fontsizebody,fontFamily: this.state.data.fontfamily }} colSpan={item.col3span} align=\"left\">\r\n                                        {item.col3}\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\nexport default withStyles(styles)(withTheme(TrashTable));\r\n"],"names":["styles","TrashTable","props","field","data","onDataChange","dayformat","instancename","instance","height","headerHeight","newTableHeight","newHeight","width","newWidth","id","state","status","monatsName","tag","tempWasteCalendar","calendarObject","calendarEntry","item","index"],"sourceRoot":""}