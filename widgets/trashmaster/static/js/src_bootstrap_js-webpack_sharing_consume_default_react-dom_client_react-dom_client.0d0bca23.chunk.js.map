{"version":3,"file":"static/js/src_bootstrap_js-webpack_sharing_consume_default_react-dom_client_react-dom_client.0d0bca23.chunk.js","mappings":"sTAcA,EAdqB,CACjB,GAAI,EAAQ,KAAgB,EAC5B,GAAI,EAAQ,KAAgB,EAC5B,GAAI,EAAQ,KAAgB,EAC5B,GAAI,EAAQ,KAAgB,EAC5B,GAAI,EAAQ,KAAgB,EAC5B,GAAI,EAAQ,KAAgB,EAC5B,GAAI,EAAQ,KAAgB,EAC5B,GAAI,EAAQ,KAAgB,EAC5B,GAAI,EAAQ,KAAgB,EAC5B,GAAI,EAAQ,KAAgB,EAC5B,QAAS,EAAQ,KAAmB,CACxC,E,iUCGA,MAAMA,EAAS,KAAO,CAClB,KAAM,CACF,KAAM,EACN,QAAS,OACT,eAAgB,SAChB,WAAY,SACZ,MAAO,OACP,SAAU,QACd,CACJ,GAEA,MAAMC,UAAmB,OAAO,aAAe,cAAa,CACxD,YAAYC,EAAO,CACf,MAAMA,CAAK,EACX,KAAK,WAAa,UAAgB,IAAI,EACtC,KAAK,WAAa,UAAgB,IAAI,EACtC,KAAK,aAAe,UAAkB,IAAI,EAC1C,KAAK,aAAe,cAAgB,EACpC,KAAK,QAAU,GACf,KAAK,kBAAoB,KAAK,MAAM,KAAK,aACzC,KAAK,eAAiB,KAAK,MAAM,KAAK,UACtC,KAAK,WAAa,CAAC,EACnB,KAAK,UAAY,EACrB,CAEA,OAAO,eAAgB,CAKnB,MAAO,CACH,GAAI,eACJ,OAAQ,cACR,YAAa,4BACb,YAAa,UACb,QAAS,SAAO,2CAA2C,EAC3D,SAAU,CACN,CACI,KAAM,SACN,MAAO,mCACP,OAAQ,CACJ,CACI,KAAM,eACN,MAAO,qCACP,KAAM,SACN,OAAQ,qCACR,UAAW,CACPC,EACAC,EACAC,IACCC,EAAA,iBAAoBH,EAAMC,EAAKC,CAAY,CACpD,EACA,CACI,KAAM,qBACN,KAAM,OACN,OAAQ,GACR,QAAS,OACb,EACA,CACI,KAAM,kBACN,MAAO,kBACP,KAAM,OACN,OAAQ,GACR,QAAS,EACb,EACA,CACI,KAAM,YACN,MAAO,sCACP,KAAM,SACN,SAAU,oCACV,UAAW,CACPF,EACAC,EACAC,IACC,KAAK,eAAeF,EAAMC,EAAKC,CAAY,CACpD,EACA,CACI,KAAM,oBACN,KAAM,OACN,OAAQ,GACR,QAAS,OACb,EACA,CACI,KAAM,mBACN,MAAO,mBACP,KAAM,OACN,OAAQ,GACR,QAAS,EACb,EACA,CACI,KAAM,OACN,QAAS,QACT,MAAO,iCACP,KAAM,SACN,QAAS,CACL,CACI,MAAO,QACP,MAAO,qCACX,EACA,CACI,MAAO,YACP,MAAO,yCACX,EACA,CACI,MAAO,gBACP,MAAO,6CACX,EACA,CACI,MAAO,OACP,MAAO,oCACX,CACJ,CACJ,EACA,CACI,KAAM,aACN,QAAS,mBACT,MAAO,uCACP,KAAM,QACN,OAAQ,uBACZ,EACA,CACI,KAAM,mBACN,OAAQ,wBACR,QAAS,IACT,MAAO,8CACP,KAAM,SACN,IAAK,GACL,IAAK,EACL,KAAM,EACV,EACA,CACI,KAAM,eACN,QAAS,GACT,MAAO,yCACP,KAAM,SACN,OAAQ,qCACR,UAAW,CACPF,EACAC,EACAC,IACCC,EAAA,gBAAmBH,EAAMC,EAAKC,CAAY,CACnD,EACA,CACI,KAAM,qBACN,KAAM,OACN,OAAQ,GACR,QAAS,OACb,EACA,CACI,KAAM,QACN,QAAS,GACT,MAAO,kCACP,KAAM,SACN,OAAQ,8BACR,UAAW,CACPF,EACAC,EACAC,IACCC,EAAA,gBAAmBH,EAAMC,EAAKC,CAAY,CACnD,EACA,CACI,KAAM,cACN,KAAM,OACN,OAAQ,GACR,QAAS,OACb,EACA,CACI,KAAM,gBACN,QAAS,EACT,MAAO,0CACP,KAAM,SACN,OAAQ,sDACR,IAAK,EACL,IAAK,GACL,KAAM,CACV,EACA,CACI,KAAM,WACN,QAAS,GACT,MAAO,qCACP,KAAM,SACN,UAAW,CACPF,EACAC,EACAC,IACCC,EAAA,gBAAmBH,EAAMC,EAAKC,CAAY,CACnD,EACA,CACI,KAAM,aACN,QAAS,QACT,MAAO,uCACP,KAAM,SACN,OAAQ,0BACR,QAAS,CACL,CACI,MAAO,QACP,MAAO,4CACX,EACA,CACI,MAAO,OACP,MAAO,2CACX,CACJ,CACJ,EACA,CACI,KAAM,WACN,QAAS,GACT,MAAO,qCACP,KAAM,SACN,UAAW,CACPF,EACAC,EACAC,IACCC,EAAA,gBAAmBH,EAAMC,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","sources":["translations.js","TrashIcon.jsx","TrashTable.jsx","App.jsx","bootstrap.js"],"sourcesContent":["const translations = {\r\n    en: require('./i18n/en.json'),\r\n    de: require('./i18n/de.json'),\r\n    ru: require('./i18n/ru.json'),\r\n    pt: require('./i18n/pt.json'),\r\n    nl: require('./i18n/nl.json'),\r\n    fr: require('./i18n/fr.json'),\r\n    it: require('./i18n/it.json'),\r\n    es: require('./i18n/es.json'),\r\n    pl: require('./i18n/pl.json'),\r\n    uk: require('./i18n/uk.json'),\r\n    'zh-cn': require('./i18n/zh-cn.json'),\r\n};\r\n\r\nexport default translations;\r\n","import React from 'react';\r\nimport i18next from 'i18next';\r\nimport { i18n as I18n } from '@iobroker/adapter-react-v5';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Card from '@mui/material/Card';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Input from '@mui/material/Input';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Select from '@mui/material/Select';\r\nimport { withStyles,withTheme } from '@mui/styles';\r\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\r\nimport { ReactComponent as TrashIconSvg } from './img/TrashIcon.svg';\r\nimport translations from './translations-i18next';\r\nimport Utils,{ arr2string,changeData,getInstances } from './Utils';\r\n\r\nconst styles = () => ({\r\n    root: {\r\n        flex: 1,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n});\r\n\r\nclass TrashIcon extends (window.visRxWidget || VisRxWidget) {\r\n    constructor(props) {\r\n        super(props);\r\n        this.changeData = changeData.bind(this);\r\n        this.arr2string = arr2string.bind(this);\r\n        this.getInstances = getInstances.bind(this);\r\n        this.refTrashIcon = React.createRef();\r\n        this.initial = true;\r\n        this.instancenameLocal = this.state.data.instancename;\r\n        this.wastetypeLocal = this.state.data.wastetype;\r\n        this.JsonObject = {};\r\n        this.oidChange = false;\r\n    }\r\n\r\n    static getWidgetInfo() {\r\n        // more details for custom filters in file:\r\n        // vis-2-beta/static/js/Attributes/Widget/WidgetField.jsx (line 424ff)\r\n        //\r\n        // new fields are not added to existing widgets !!!\r\n        return {\r\n            id: 'tplTrashIcon',\r\n            visSet: 'trashmaster',\r\n            visSetLabel: 'vis_2_widgets_trashmaster', // Widget set translated label (should be defined only in one widget of set)\r\n            visSetColor: '#63C149',                // Color of widget set. it is enough to set color only in one widget of set\r\n            visName: I18n.t('vis_2_widgets_trashmaster_widgetname_icon'), // Name of widget\r\n            visAttrs: [\r\n                {\r\n                    name: 'common', // group name\r\n                    label: 'vis_2_widgets_trashmaster_common', // translated group label\r\n                    fields: [\r\n                        {\r\n                            name: 'instancename',\r\n                            label: 'vis_2_widgets_trashmaster_instance',\r\n                            type: 'custom',\r\n                            hidden: 'data.instancenamehidden === \"true\"',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showInstances(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'instancenamehidden',  // hide instance selection if only one instance exists\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: 'false',\r\n                        },\r\n                        {\r\n                            name: 'selectinstances',     // hidden value of the select entries for instances\r\n                            label: 'selectinstances',\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: '',\r\n                        },\r\n                        {\r\n                            name: 'wastetype',\r\n                            label: 'vis_2_widgets_trashmaster_wastetype',\r\n                            type: 'custom',\r\n                            disabled: 'data.wastetypedisabled === \"true\"',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => this.showWasteTypes(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'wastetypedisabled',     // hide waste type selection if only one waste type is activated\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: 'false',\r\n                        },\r\n                        {\r\n                            name: 'selectwastetypes',     // hidden value of the select entries for waste types\r\n                            label: 'selectwastetypes',\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: '',\r\n                        },\r\n                        {\r\n                            name: 'icon',\r\n                            default: 'trash',\r\n                            label: 'vis_2_widgets_trashmaster_icon',\r\n                            type: 'select',\r\n                            options: [\r\n                                {\r\n                                    value: 'trash',\r\n                                    label: 'vis_2_widgets_trashmaster_icontrash',\r\n                                },\r\n                                {\r\n                                    value: 'yellowbag',\r\n                                    label: 'vis_2_widgets_trashmaster_iconyellowbag',\r\n                                },\r\n                                {\r\n                                    value: 'christmastree',\r\n                                    label: 'vis_2_widgets_trashmaster_iconchristmastree',\r\n                                },\r\n                                {\r\n                                    value: 'leaf',\r\n                                    label: 'vis_2_widgets_trashmaster_iconleaf',\r\n                                },\r\n                            ],\r\n                        },\r\n                        {\r\n                            name: 'trashcolor',\r\n                            default: 'rgba(40,30,88,1)',\r\n                            label: 'vis_2_widgets_trashmaster_trashcolor',\r\n                            type: 'color',\r\n                            hidden: 'data.icon !== \"trash\"',\r\n                        },\r\n                        {\r\n                            name: 'trashcolorfactor',\r\n                            hidden: 'data.icon !== \"trash\"',\r\n                            default: -0.3,\r\n                            label: 'vis_2_widgets_trashmaster_trashcolor_factor',\r\n                            type: 'slider',\r\n                            min: -1,\r\n                            max: 1,\r\n                            step: 0.1,\r\n                        },\r\n                        {\r\n                            name: 'whatsapplogo',\r\n                            default: true,\r\n                            label: 'vis_2_widgets_trashmaster_whatsapplogo',\r\n                            type: 'custom',\r\n                            hidden: 'data.whatsapplogohidden === \"true\"',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showCheckbox(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'whatsapplogohidden',     // hide whatsapp selection if whatsapp is not activated for the selected waste\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: 'false',\r\n                        },\r\n                        {\r\n                            name: 'blink',\r\n                            default: true,\r\n                            label: 'vis_2_widgets_trashmaster_blink',\r\n                            type: 'custom',\r\n                            hidden: 'data.blinkhidden === \"true\"',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showCheckbox(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'blinkhidden',     // hide blink checkbox if blink is not activated for the selected waste\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: 'false',\r\n                        },\r\n                        {\r\n                            name: 'blinkinterval',\r\n                            default: 3,\r\n                            label: 'vis_2_widgets_trashmaster_blinkinterval',\r\n                            type: 'slider',\r\n                            hidden: 'data.blink === false || data.blinkhidden === \"true\"',\r\n                            min: 1,\r\n                            max: 15,\r\n                            step: 1,\r\n                        },\r\n                        {\r\n                            name: 'showdate',\r\n                            default: true,\r\n                            label: 'vis_2_widgets_trashmaster_showdate',\r\n                            type: 'custom',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showCheckbox(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'dateformat',\r\n                            default: 'short',\r\n                            label: 'vis_2_widgets_trashmaster_dateformat',\r\n                            type: 'select',\r\n                            hidden: 'data.showdate === false',\r\n                            options: [\r\n                                {\r\n                                    value: 'short',\r\n                                    label: 'vis_2_widgets_trashmaster_dateformat_short',\r\n                                },\r\n                                {\r\n                                    value: 'long',\r\n                                    label: 'vis_2_widgets_trashmaster_dateformat_long',\r\n                                },\r\n                            ],\r\n                        },\r\n                        {\r\n                            name: 'showdays',\r\n                            default: true,\r\n                            label: 'vis_2_widgets_trashmaster_showdays',\r\n                            type: 'custom',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showCheckbox(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'fontfamily',\r\n                            label: 'vis_2_widgets_trashmaster_fontfamily',\r\n                            default: 'Arial',\r\n                            type: 'custom',\r\n                            hidden: 'data.showdate === false && data.showdays === false',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showFontfamily(field,data,onDataChange,['fontsize']),\r\n                        },\r\n                        {\r\n                            name: 'fontsize',\r\n                            default: 20,\r\n                            label: 'vis_2_widgets_trashmaster_fontsize',\r\n                            type: 'slider',\r\n                            hidden: 'data.showdate === false && data.showdays === false',\r\n                            min: 6,\r\n                            max: 45,\r\n                            step: 1,\r\n                        },\r\n                        {\r\n                            name: 'oid',     // name in data structure\r\n                            label: 'vis_2_widgets_trashmaster_oid',\r\n                            type: 'id',\r\n                            noInit: true,\r\n                            hidden: true,\r\n                        },\r\n                    ],\r\n                },\r\n                // check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\r\n            ],\r\n            visPrev: 'widgets/trashmaster/img/trash.png',\r\n        };\r\n    }\r\n\r\n    // eslint-disable-next-line class-methods-use-this\r\n    async propertiesUpdate() {\r\n        // Widget has 3 important states\r\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\r\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\r\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\r\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\r\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\r\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\r\n        if (this.initial === true && this.oidChange !== true) {\r\n            return;\r\n        }\r\n        const { wastetype,instancename } = this.state.data;\r\n        let renderIcon = true;\r\n        if (typeof instancename !== 'undefined' && this.instancenameLocal !== instancename) {\r\n            this.instancenameLocal = instancename;\r\n            await this.getWasteTypes(instancename);\r\n            renderIcon = false;\r\n        }\r\n        if (this.oidChange === true || (\r\n            typeof wastetype !== 'undefined' && this.wastetypeLocal !== wastetype)) {\r\n            this.wastetypeLocal = wastetype;\r\n            await this.getJsonObject(wastetype,this.instancenameLocal);\r\n            await this.updateWhatsappAndBlink();\r\n            renderIcon = true;\r\n            if (this.oidChange === true) { this.oidChange = false; }\r\n        }\r\n        if (renderIcon === true) {\r\n            await this.renderIcon();\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        super.componentDidMount();\r\n        // Update data\r\n        i18next.init(translations)\r\n            .then(() => {\r\n                i18next.changeLanguage(this.props.systemConfig.common.language);\r\n            });\r\n        this.getInstances()\r\n            .then(instance => {\r\n                this.getWasteTypes(instance)\r\n                    .then(retwastetype => {\r\n                        this.getJsonObject(retwastetype,instance)\r\n                            .then(() => {\r\n                                this.updateWhatsappAndBlink()\r\n                                    .then(() => {\r\n                                        this.renderIcon()\r\n                                            .then(() => {\r\n                                                this.initial = false;\r\n                                            });\r\n                                    });\r\n                            });\r\n                    });\r\n            });\r\n    }\r\n\r\n    // Do not delete this method. It is used by vis to read the widget configuration.\r\n    // eslint-disable-next-line class-methods-use-this\r\n    getWidgetInfo() {\r\n        return TrashIcon.getWidgetInfo();\r\n    }\r\n\r\n    // This function is called every time when rxData is changed\r\n    onRxDataChanged() {\r\n        this.propertiesUpdate();\r\n    }\r\n\r\n    // This function is called every time when rxStyle is changed\r\n    // eslint-disable-next-line class-methods-use-this\r\n    onRxStyleChanged() {\r\n    }\r\n\r\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\r\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\r\n    onStateUpdated(id,state) {\r\n        // state of the object 'WasteCalendar' has changed\r\n        this.oidChange = true;\r\n        this.propertiesUpdate();\r\n    }\r\n\r\n    async renderIcon() {\r\n        const { trashcolor,trashcolorfactor,fontfamily,fontsize,whatsapplogo,dateformat,blink,blinkinterval,showdate,showdays } = this.state.data;\r\n        this.refTrashIcon.current.childNodes.forEach(element => {\r\n            if (element.id === 'Abfalltonne') {\r\n                // show or hide the dustbin\r\n                element.attributes.style.value = `visibility: ${this.state.data.icon === 'trash' ? 'visible' : 'hidden'};`;\r\n                let trashColorOuter = '';\r\n                element.childNodes.forEach(child => {\r\n                    if (child.id === 'tonne') {\r\n                        // color of the dustbin\r\n                        if (trashcolor === '') {\r\n                            this.state.data.trashcolor = child.attributes.fill.nodeValue;\r\n                            trashColorOuter = child.attributes.fill.nodeValue;\r\n                        } else {\r\n                            child.attributes.fill.nodeValue = this.state.data.trashcolor;\r\n                            trashColorOuter = this.state.data.trashcolor;\r\n                        }\r\n                    }\r\n                    if (child.id === 'tonne-innen' && typeof trashColorOuter !== 'undefined') {\r\n                        // inner color of the dustbin\r\n                        const colors = trashColorOuter.replace('rgba(','').replace(')','').split(',');\r\n                        const factor = 1 + trashcolorfactor;\r\n                        const color0 = Math.round(parseInt(colors[0]) * factor);\r\n                        const color1 = Math.round(parseInt(colors[1]) * factor);\r\n                        const color2 = Math.round(parseInt(colors[2]) * factor);\r\n                        const newColor = `rgba(${color0},${color1},${color2},1)`;\r\n                        child.attributes.fill.nodeValue = newColor;\r\n                    }\r\n                });\r\n            }\r\n            if (element.id === 'GelberSack') {\r\n                // show or hide the yellow bag\r\n                element.attributes.style.value = `visibility: ${this.state.data.icon === 'yellowbag' ? 'visible' : 'hidden'};`;\r\n            }\r\n            if (element.id === 'Blatt') {\r\n                // show or hide the yellow bag\r\n                element.attributes.style.value = `visibility: ${this.state.data.icon === 'leaf' ? 'visible' : 'hidden'};`;\r\n            }\r\n            if (element.id === 'Weihnachtsbaum') {\r\n                // show or hide the yellow bag\r\n                element.attributes.style.value = `visibility: ${this.state.data.icon === 'christmastree' ? 'visible' : 'hidden'};`;\r\n            }\r\n            if (element.id === 'whatsapp') {\r\n                // show or hide the Whatsapp logo\r\n                element.attributes.style.value = `visibility: ${whatsapplogo === true ? 'visible' : 'hidden'};`;\r\n            }\r\n            if (element.id.indexOf('Abfuhrdatum') !== -1) {\r\n                const options = { year: '2-digit',month: '2-digit',day: '2-digit' };\r\n                if (dateformat === 'long') {\r\n                    options.weekday = 'long';\r\n                }\r\n                element.innerHTML = new Date(this.JsonObject.AbfuhrtagJson).toLocaleDateString(this.props.lang,options);\r\n                element.style.fontSize = `${fontsize}px`;\r\n                element.style.fontFamily = fontfamily;\r\n                element.style.visibility = showdate === true ? 'visible' : 'hidden';\r\n                /* \"Abfuhrdatum\": \"08.04.2023\",\r\n                    \"AbfuhrTagLang\": \"Samstag\",\r\n                    \"AbfuhrTagKurz\": \"Sa\",\r\n                    \"Abfuhrart\": \"Restmüll wöchentlich\"\r\n                    \"Resttage\": 3\r\n                */\r\n            }\r\n            if (element.id.indexOf('AnzahlTage') !== -1) {\r\n                element.innerHTML = i18next.t('vis_2_widgets_trashmaster_dayCollection',{ count: this.JsonObject.Resttage });\r\n                element.style.fontSize = fontsize;\r\n                element.style.fontFamily = fontfamily;\r\n                element.style.visibility = showdays === true ? 'visible' : 'hidden';\r\n            }\r\n        });\r\n        if (blink === true && this.JsonObject.Blinken === true) {\r\n            const blinking = [\r\n                { opacity: 0 },\r\n                { opacity: 1 },\r\n            ];\r\n            const timing = {\r\n                duration: blinkinterval * 1000,\r\n                iterations: Infinity,\r\n            };\r\n            this.refTrashIcon.current.animate(\r\n                blinking,\r\n                timing,\r\n            );\r\n        } else {\r\n            this.refTrashIcon.current.getAnimations().map(animation => animation.cancel());\r\n        }\r\n    }\r\n\r\n    async getJsonObject(selwastetype,instance) {\r\n        const id = `trashmaster.${instance}.WasteCalendar`;\r\n        if (selwastetype === '') { return; }\r\n        await this.props.socket.getForeignStates(id)\r\n            .then(status => {\r\n                if (!(id in status)) { return; }\r\n                const getJsonObject  = JSON.parse(status[id].val).filter(element => element.AbfuhrartNr === selwastetype);\r\n                this.JsonObject =  typeof getJsonObject[0] !== 'undefined' ? getJsonObject[0] : {};\r\n                this.changeData({ oid: id });\r\n            });\r\n    }\r\n\r\n    async updateWhatsappAndBlink() {\r\n        const wastetypes = (('selectwastetypes' in this.state.data) && this.state.data.selectwastetypes !== '') ? this.state.data.selectwastetypes.replaceAll('[','{').replaceAll(']','}').replaceAll('#','\"').split('}')\r\n            .slice(0,-1) : [];\r\n        for (let i = 0; i < wastetypes.length; i++) {\r\n            wastetypes[i] += '}';\r\n            wastetypes[i] = JSON.parse(wastetypes[i].replaceAll(/'/g,'\"'));\r\n        }\r\n        const filtered = wastetypes.filter(wastetype => wastetype.value === this.state.data.wastetype);\r\n        const whatsappUsed = filtered.length > 0 ? parseInt(filtered[0].whatsapp) > -1 : false;\r\n        if (this.state.editMode === true) {\r\n            this.changeData({ whatsapplogohidden: whatsappUsed === true ? 'false' : 'true' });\r\n        }\r\n        if (whatsappUsed === false) {\r\n            this.changeData({ whatsapplogo: false });\r\n        }\r\n        const blinkUsed = filtered.length > 0 ? parseInt(filtered[0].blink) > -1 : false;\r\n        if (this.state.editMode === true) {\r\n            this.changeData({ blinkhidden: blinkUsed === true ? 'false' : 'true' });\r\n        }\r\n        if (blinkUsed === false) {\r\n            this.changeData({ blink: false });\r\n        }\r\n    }\r\n\r\n    static showWasteTypes(field,data,onDataChange) {\r\n        const menuitems = (('selectwastetypes' in data) && data.selectwastetypes !== '') ? data.selectwastetypes.replaceAll('[','{').replaceAll(']','}').replaceAll('#','\"').split('}')\r\n            .slice(0,-1) : [];\r\n        for (let i = 0; i < menuitems.length; i++) {\r\n            menuitems[i] += '}';\r\n            menuitems[i] = JSON.parse(menuitems[i].replaceAll(/'/g,'\"'));\r\n        }\r\n        return data.selectwastetypes === '' ? <div></div> : <FormControl>\r\n            <Select\r\n                value={data[field.name]}\r\n                onChange={event => {\r\n                    onDataChange({ [field.name]: event.target.value });\r\n                }}\r\n                input={<Input name=\"wastetypes\" />}\r\n                label={i18next.t('vis_2_widgets_trashmaster_wastetype')}\r\n                style={{ fontSize: '12.8px' }}\r\n            >\r\n                {menuitems.map(item => (\r\n                    <MenuItem key={item.value} value={item.value} style={{ fontSize: '16px' }}>\r\n                        {item.title}\r\n                    </MenuItem>\r\n                ))}\r\n            </Select>\r\n        </FormControl>;\r\n    }\r\n\r\n    async getWasteTypes(instance) {\r\n        if (instance === '') { return ''; }\r\n        const wasteType = await this.props.socket.getObjectViewSystem('instance','system.adapter.trashmaster.','system.adapter.trashmaster.\\u9999')\r\n            .then(rows => {\r\n                const allWasteTypes = [];\r\n                Object.keys(rows).forEach(key => {\r\n                    if (Object.keys(rows).length === 1 || rows[key]._id === `system.adapter.trashmaster.${instance}`) {\r\n                        for (let k = 0; k < rows[key].native.wasteTypes.length; k++) {\r\n                            if (rows[key].native.wasteTypes[k].used === true) {\r\n                                allWasteTypes.push({ value: rows[key].native.wasteTypes[k].value,title: rows[key].native.wasteTypes[k].title,whatsapp: rows[key].native.wasteTypes[k].whatsapp,blink: rows[key].native.wasteTypes[k].blink });\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                return allWasteTypes;\r\n            })\r\n            .then(async allWasteTypes => {\r\n                if (this.state.editMode) {\r\n                    await this.arr2string(allWasteTypes)\r\n                        .then(strwastetypes => {\r\n                            this.changeData({ selectwastetypes: strwastetypes });\r\n                        });\r\n                    this.changeData({ wastetypedisabled: allWasteTypes.length < 2 ? 'true' : 'false' });\r\n                }\r\n                return allWasteTypes;\r\n            })\r\n            .then(allWasteTypes => {\r\n                if (this.initial === true && (!('wastetype' in this.state.data) || this.state.data.wastetype === '')) {\r\n                    const ret = allWasteTypes.length > 0 ? allWasteTypes[0].value : '';\r\n                    this.changeData({ wastetype: ret });\r\n                    return ret;\r\n                }\r\n                if (allWasteTypes.filter(wastetype => wastetype.value === this.state.data.wastetype).length > 0) {\r\n                    return this.state.data.wastetype;\r\n                }\r\n                this.changeData({ wastetype: '' });\r\n                return '';\r\n            })\r\n            .catch(error => {\r\n                console.log('ERROR !!!:');\r\n                console.log(error);\r\n                return '';\r\n            });\r\n        if (this.wastetypeLocal !== wasteType) { this.wastetypeLocal = wasteType; }\r\n        return wasteType;\r\n    }\r\n\r\n    renderWidgetBody(props) {\r\n        // eslint-disable-next-line prefer-template\r\n        super.renderWidgetBody(props);\r\n        return <Card class={`\"card-trash${props.id}\"`} style={{ width: '100%',height: '100%' }}>\r\n            <CardContent style={{ width: '100%',height: '100%',display: 'flex',justifyContent:'center',alignItems: 'center' }}>\r\n                <TrashIconSvg class={`\"trashicon${props.id}\"`} ref={this.refTrashIcon} />\r\n            </CardContent>\r\n        </Card>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(withTheme(TrashIcon));\r\n","import React from 'react';\r\nimport i18next from 'i18next';\r\nimport { i18n as I18n } from '@iobroker/adapter-react-v5';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { withStyles,withTheme } from '@mui/styles';\r\nimport { VisRxWidget } from '@iobroker/vis-2-widgets-react-dev';\r\nimport translations from './translations-i18next';\r\nimport Utils,{ arr2string,changeData,getInstances } from './Utils';\r\n\r\nconst styles = () => ({\r\n    root: {\r\n        flex: 1,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n});\r\n\r\nclass TrashTable extends (window.visRxWidget || VisRxWidget) {\r\n    constructor(props) {\r\n        super(props);\r\n        this.arr2string = arr2string.bind(this);\r\n        this.changeData = changeData.bind(this);\r\n        this.getInstances = getInstances.bind(this);\r\n        this.initial = true;\r\n        this.instancenameLocal = this.state.data.instancename;\r\n        this.dayformatLocal = this.state.data.dayformat;\r\n        this.oidChange = false;\r\n        this.wasteCalendar = [];\r\n        this.refTable = React.createRef();\r\n        this.refTableBody = React.createRef();\r\n        this.refTableHeader = React.createRef();\r\n    }\r\n\r\n    static getWidgetInfo() {\r\n        // more details for custom filters in file:\r\n        // vis-2-beta/static/js/Attributes/Widget/WidgetField.jsx (line 424ff)\r\n        //\r\n        // new fields are not added to existing widgets !!!\r\n        return {\r\n            id: 'tplTrashTable',\r\n            visSet: 'trashmaster',\r\n            visName: I18n.t('vis_2_widgets_trashmaster_widgetname_table'), // Name of widget\r\n            visAttrs: [\r\n                {\r\n                    name: 'common', // group name\r\n                    label: 'vis_2_widgets_trashmaster_common', // translated group label\r\n                    fields: [\r\n                        {\r\n                            name: 'instancename',\r\n                            label: 'vis_2_widgets_trashmaster_instance',\r\n                            type: 'custom',\r\n                            hidden: 'data.instancenamehidden === \"true\"',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showInstances(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'instancenamehidden',  // hide instance selection if only one instance exists\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: 'false',\r\n                        },\r\n                        {\r\n                            name: 'selectinstances',     // hidden value of the select entries for instances\r\n                            label: 'selectinstances',\r\n                            type: 'text',\r\n                            hidden: true,\r\n                            default: '',\r\n                        },\r\n                        {\r\n                            name: 'dayformat',\r\n                            default: 'short',\r\n                            label: 'vis_2_widgets_trashmaster_dayformat',\r\n                            type: 'select',\r\n                            options: [\r\n                                {\r\n                                    value: 'short',\r\n                                    label: 'vis_2_widgets_trashmaster_dateformat_short',\r\n                                },\r\n                                {\r\n                                    value: 'long',\r\n                                    label: 'vis_2_widgets_trashmaster_dateformat_long',\r\n                                },\r\n                            ],\r\n                        },\r\n                        {\r\n                            name: 'fontfamily',\r\n                            label: 'vis_2_widgets_trashmaster_fontfamily',\r\n                            default: 'Arial',\r\n                            type: 'custom',\r\n                            hidden: 'data.showdate === false && data.showdays === false',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showFontfamily(field,data,onDataChange,['fontsizeheader','fontsizebody','fontsizemonth']),\r\n                        },\r\n                        {\r\n                            name: 'showheader',\r\n                            default: true,\r\n                            label: 'vis_2_widgets_trashmaster_showheader',\r\n                            type: 'custom',\r\n                            component: (\r\n                                field,\r\n                                data,\r\n                                onDataChange,\r\n                            ) => Utils.showCheckbox(field,data,onDataChange),\r\n                        },\r\n                        {\r\n                            name: 'fontsizeheader',\r\n                            default: 12,\r\n                            label: 'vis_2_widgets_trashmaster_fontsize_header',\r\n                            type: 'slider',\r\n                            hidden: 'data.showheader === false',\r\n                            min: 6,\r\n                            max: 24,\r\n                            step: 1,\r\n                        },\r\n                        {\r\n                            name: 'fontsizemonth',\r\n                            default: 10,\r\n                            label: 'vis_2_widgets_trashmaster_fontsize_month',\r\n                            type: 'slider',\r\n                            min: 6,\r\n                            max: 24,\r\n                            step: 1,\r\n                        },\r\n                        {\r\n                            name: 'fontsizebody',\r\n                            default: 10,\r\n                            label: 'vis_2_widgets_trashmaster_fontsize_body',\r\n                            type: 'slider',\r\n                            min: 6,\r\n                            max: 24,\r\n                            step: 1,\r\n                        },\r\n                        {\r\n                            name: 'oid',     // name in data structure\r\n                            label: 'vis_2_widgets_trashmaster_oid',\r\n                            type: 'id',\r\n                            noInit: true,\r\n                            hidden: true,\r\n                        },\r\n                    ],\r\n                },\r\n                // check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\r\n            ],\r\n            visPrev: 'widgets/trashmaster/img/table.png',\r\n        };\r\n    }\r\n\r\n    // eslint-disable-next-line class-methods-use-this\r\n    async propertiesUpdate() {\r\n        // Widget has 3 important states\r\n        // 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\r\n        //                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\r\n        // 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\r\n        //                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\r\n        // 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\r\n        //                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\r\n        if (this.initial === true && this.oidChange !== true) {\r\n            return;\r\n        }\r\n        const { dayformat,instancename } = this.state.data;\r\n        if ((typeof instancename !== 'undefined' && this.instancenameLocal !== instancename) || this.oidChange === true || this.dayformatLocal !== dayformat) {\r\n            this.instancenameLocal = instancename;\r\n            this.dayformatLocal = dayformat;\r\n            await this.getWasteCalendar(instancename);\r\n            if (this.oidChange === true) { this.oidChange = false; }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        super.componentDidMount();\r\n        // Update data\r\n        i18next.init(translations)\r\n            .then(() => {\r\n                i18next.changeLanguage(this.props.systemConfig.common.language);\r\n            });\r\n        this.getInstances()\r\n            .then(instance => {\r\n                this.getWasteCalendar(instance)\r\n                    .then(() => {\r\n                        this.changeTableSize()\r\n                            .then(() => {\r\n                                this.initial = false;\r\n                            });\r\n                    });\r\n            });\r\n    }\r\n\r\n    // Do not delete this method. It is used by vis to read the widget configuration.\r\n    // eslint-disable-next-line class-methods-use-this\r\n    getWidgetInfo() {\r\n        return TrashTable.getWidgetInfo();\r\n    }\r\n\r\n    // This function is called every time when rxData is changed\r\n    onRxDataChanged() {\r\n        this.propertiesUpdate();\r\n    }\r\n\r\n    // This function is called every time when rxStyle is changed\r\n    // eslint-disable-next-line class-methods-use-this\r\n    onRxStyleChanged() {\r\n        this.changeTableSize();\r\n    }\r\n\r\n    async changeTableSize() {\r\n        const height = this.refService.current.clientHeight;\r\n        if (height !== 0) {\r\n            const headerHeight = this.state.data.showheader === false ? 0 : parseInt(this.refTableHeader.current.offsetHeight);\r\n            const newTableHeight = `${(height - 2).toString()}px`;\r\n            const newHeight = `${(height - headerHeight - 10).toString()}px`;\r\n            this.refTable.current.style.height = newTableHeight;\r\n            this.refTableBody.current.style.height = newHeight;\r\n        }\r\n        const width = this.refService.current.clientWidth;\r\n        if (width !== 0) {\r\n            const newWidth = `${(width - 2).toString()}px`;\r\n            this.refTable.current.style.width = newWidth;\r\n            this.refTableBody.current.style.width = newWidth;\r\n            this.refTableHeader.current.style.width = newWidth;\r\n        }\r\n    }\r\n\r\n    // This function is called every time when some Object State updated, but all changes lands into this.state.values too\r\n    // eslint-disable-next-line class-methods-use-this, no-unused-vars\r\n    onStateUpdated(id,state) {\r\n        // state of the object 'WasteCalendar' has changed\r\n        this.oidChange = true;\r\n        this.propertiesUpdate();\r\n    }\r\n\r\n    async getCalendarObject(instance) {\r\n        const id = `trashmaster.${instance}.WasteCalendar`;\r\n        const calendar = await this.props.socket.getForeignStates(id)\r\n            .then(status => {\r\n                if (!(id in status) || typeof status[id].val === 'undefined') { return {}; }\r\n                this.changeData({ oid: id });\r\n                return JSON.parse(status[id].val);\r\n            });\r\n        return calendar;\r\n    }\r\n\r\n    async getWasteCalendar(instance) {\r\n        let monatsName = '';\r\n        let tag = '';\r\n        this.wasteCalendar = [];\r\n        const tempWasteCalendar = [];\r\n        const calendarObject = await this.getCalendarObject(instance);\r\n        if (typeof calendarObject === 'undefined' || Object.entries(calendarObject).length === 0) return;\r\n        // eslint-disable-next-line array-callback-return\r\n        Object.entries(calendarObject).map(calendarEntry => {\r\n            if (monatsName !== calendarEntry[1].Monatsname) {\r\n                tempWasteCalendar.push({\r\n                    col1span: 3,\r\n                    col2span: 0,\r\n                    col3span: 0,\r\n                    col1: `${calendarEntry[1].Monatsname} ${calendarEntry[1].Jahr}`,\r\n                    col2: '',\r\n                    col3: '',\r\n                });\r\n                monatsName = calendarEntry[1].Monatsname;\r\n            }\r\n            if (tag !== calendarEntry[1].Abfuhrdatum) {\r\n                tempWasteCalendar.push({\r\n                    col1span: 1,\r\n                    col2span: 1,\r\n                    col3span: 1,\r\n                    col1: `${this.state.data.dayformat === 'short' ? `${calendarEntry[1].AbfuhrTagKurz}.` : calendarEntry[1].AbfuhrTagLang}`,\r\n                    col2: `${calendarEntry[1].Tag}.`,\r\n                    col3: calendarEntry[1].Abfuhrart,\r\n                });\r\n                tag = calendarEntry[1].Abfuhrdatum;\r\n            } else {\r\n                tempWasteCalendar.push({\r\n                    col1span: 2,\r\n                    col2span: 0,\r\n                    col3span: 1,\r\n                    col1: '',\r\n                    col2: '',\r\n                    col3: calendarEntry[1].Abfuhrart,\r\n                });\r\n            }\r\n        });\r\n        this.wasteCalendar = [...tempWasteCalendar];\r\n    }\r\n\r\n    renderWidgetBody(props) {\r\n        super.renderWidgetBody(props);\r\n        return <div ref={this.refTable} style={{ overflow: 'auto' }}>\r\n            {this.state.data.showheader === true && <Table>\r\n                <TableHead ref={this.refTableHeader}>\r\n                    <TableRow>\r\n                        <TableCell sx={{ fontSize: this.state.data.fontsizeheader,fontFamily: this.state.data.fontfamily  }} colSpan={3} align=\"left\">\r\n                            <b>{i18next.t('vis_2_widgets_trashmaster_widgetname_table')}</b>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n            </Table>}\r\n            <div ref={this.refTableBody} style={{ overflow: 'auto',height: '200px',width: '100%' }}>\r\n                <Table size=\"small\">\r\n                    <TableBody>\r\n                        {this.wasteCalendar.map((item,index) => (\r\n                            <TableRow key={index}>\r\n                                {item.col1span > 0 && (\r\n                                    <TableCell sx={{ fontSize: item.col1span === 3 ? this.state.data.fontsizemonth : this.state.data.fontsizebody,fontFamily: this.state.data.fontfamily }} colSpan={item.col1span} align=\"left\">\r\n                                        {item.col1}\r\n                                    </TableCell>\r\n                                )}\r\n                                {item.col2span > 0 && (\r\n                                    <TableCell sx={{ fontSize: this.state.data.fontsizebody,fontFamily: this.state.data.fontfamily }} colSpan={item.col2span} align=\"left\">\r\n                                        {item.col2}\r\n                                    </TableCell>\r\n                                )}\r\n                                {item.col3span > 0 && (\r\n                                    <TableCell sx={{ fontSize: this.state.data.fontsizebody,fontFamily: this.state.data.fontfamily }} colSpan={item.col3span} align=\"left\">\r\n                                        {item.col3}\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\nexport default withStyles(styles)(withTheme(TrashTable));\r\n","import React from 'react';\r\n\r\nimport WidgetDemoApp from '@iobroker/vis-2-widgets-react-dev/widgetDemoApp';\r\nimport { i18n as I18n } from '@iobroker/adapter-react-v5';\r\nimport { withStyles } from '@mui/styles';\r\nimport translations from './translations';\r\nimport TrashIcon from './TrashIcon';\r\nimport TrashTable from './TrashTable';\r\n\r\nconst styles = theme => ({\r\n    app: {\r\n        backgroundColor: theme?.palette?.background.default,\r\n        color: theme?.palette?.text.primary,\r\n        height: '100%',\r\n        width: '100%',\r\n        overflow: 'auto',\r\n        display: 'flex',\r\n    },\r\n});\r\n\r\nclass App extends WidgetDemoApp {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // init translations\r\n        I18n.extendTranslations(translations);\r\n        this.socket.registerConnectionHandler(this.onConnectionChanged);\r\n    }\r\n\r\n    onConnectionChanged = isConnected => {\r\n        if (isConnected) {\r\n            this.socket.getSystemConfig()\r\n                .then(systemConfig => this.setState({ systemConfig }));\r\n        }\r\n    };\r\n\r\n    renderWidget() {\r\n        return <div className={this.props.classes.app}>\r\n            <TrashIcon\r\n                style={{\r\n                    width: 560,\r\n                    height: 530,\r\n                }}\r\n            />\r\n            <TrashTable />\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","import bootstrap from '@iobroker/vis-2-widgets-react-dev/bootstrap';\nimport App from './App';\n\nbootstrap(App);\n"],"names":["styles","TrashIcon","props","field","data","onDataChange","Utils","wastetype","instancename","renderIcon","i18next","instance","retwastetype","id","state","trashcolor","trashcolorfactor","fontfamily","fontsize","whatsapplogo","dateformat","blink","blinkinterval","showdate","showdays","element","trashColorOuter","child","colors","factor","color0","color1","color2","newColor","options","blinking","timing","animation","selwastetype","status","getJsonObject","wastetypes","i","filtered","whatsappUsed","blinkUsed","menuitems","FormControl","Select","event","Input","item","MenuItem","wasteType","rows","allWasteTypes","key","k","strwastetypes","ret","error","Card","CardContent","TrashTable","dayformat","height","headerHeight","newTableHeight","newHeight","width","newWidth","monatsName","tag","tempWasteCalendar","calendarObject","calendarEntry","Table","TableHead","TableRow","TableCell","TableBody","index","theme","App","isConnected","systemConfig","bootstrap"],"sourceRoot":""}